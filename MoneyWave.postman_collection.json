{
	"info": {
		"_postman_id": "6537fb8b-b83a-467f-abc9-a25da8dad045",
		"name": "MoneyWave",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Authorization Token - Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"token\", jsonData.token);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Status returned is success\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"success\");",
									"});",
									"",
									"pm.test(\"Token Generated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.not.empty",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"apiKey\": \"9A5FEC09D9C5DDAF1FEAB1431B0EA518\",\n\"secret\": \"61F44217CA0A79DFED7BF13873449256\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/merchant/verify?",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"merchant",
								"verify"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Token - Wrong ApiKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Status returned is error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"});",
									"",
									"pm.test(\"Correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).contain(\"Merchant Keys do not exist \");",
									"});",
									"",
									"pm.test(\"Correct message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).contain(\"Merchant Keys do not exist\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"apiKey\": \"9A5FEC09D9C5DDAF1FEAB1431B0EA517\",\n\"secret\": \"61F44217CA0A79DFED7BF13873449256\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/merchant/verify?",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"merchant",
								"verify"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Token - Wrong Secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"apiKey\": \"9A5FEC09D9C5DDAF1FEAB1431B0EA518\",\n\"secret\": \"61F44217CA0A79DFED7BF13873449278\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/merchant/verify?",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"merchant",
								"verify"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Token - No ApiKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Status returned is error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"});",
									"",
									"pm.test(\"Correct message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Api key is required.\");",
									"});",
									"",
									"pm.test(\"Correct code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"INVALID_APIKEY\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"apiKey\": \"\",\n\"secret\": \"F683C28BC037C08434A40344DFF7BB3A\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/merchant/verify?",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"merchant",
								"verify"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorization Token - No Secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Status returned is error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"error\");",
									"});",
									"",
									"pm.test(\"Correct message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Secret is required.\");",
									"});",
									"",
									"pm.test(\"Correct code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.code).to.eql(\"INVALID_SECRET\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"apiKey\": \"9A5FEC09D9C5DDAF1FEAB1431B0EA518\",\n\"secret\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/v1/merchant/verify?",
							"host": [
								"{{url}}"
							],
							"path": [
								"v1",
								"merchant",
								"verify"
							],
							"query": [
								{
									"key": "",
									"value": null
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Send Money to People",
			"item": [
				{
					"name": "Bank and Destination",
					"item": [
						{
							"name": "Bank and Destination - Bank List - Successful - NG",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"banks Fetched\");",
											"});",
											"",
											"pm.test(\"Bank List Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/banks?country=NG",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks"
									],
									"query": [
										{
											"key": "country",
											"value": "NG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Bank List - Successful - GH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"banks Fetched\");",
											"});",
											"",
											"pm.test(\"Bank List Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/banks?country=GH",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks"
									],
									"query": [
										{
											"key": "country",
											"value": "GH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Bank List - Successful - KE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct Bank List Code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"banks Fetched\");",
											"});",
											"",
											"pm.test(\"Bank List Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/banks?country=KE",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks"
									],
									"query": [
										{
											"key": "country",
											"value": "KE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Bank List - Successful - ZA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"banks Fetched\");",
											"});",
											"",
											"pm.test(\"Bank List Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/banks?country=ZA",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks"
									],
									"query": [
										{
											"key": "country",
											"value": "ZA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Bank List - No Country Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"banks Fetched\");",
											"});",
											"",
											"pm.test(\"Bank List Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).not.empty",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/banks?country=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks"
									],
									"query": [
										{
											"key": "country",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Bank List - Invalid Country Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"banks Fetched\");",
											"});",
											"",
											"pm.test(\"Bank List Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).empty;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/banks?country=xx",
									"host": [
										"{{url}}"
									],
									"path": [
										"banks"
									],
									"query": [
										{
											"key": "country",
											"value": "xx"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Bank List -  Country Code  Not Listed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"banks Fetched\");",
											"});",
											"",
											"pm.test(\"Bank List Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/banks?country=EU",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks"
									],
									"query": [
										{
											"key": "country",
											"value": "EU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Branch List - Successful GH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"branches Fetched\");",
											"});",
											"",
											"pm.test(\"List Of Branches Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).not.empty;",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/v1/banks/branch?country=GH&bankcode=20313400",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks",
										"branch"
									],
									"query": [
										{
											"key": "country",
											"value": "GH"
										},
										{
											"key": "bankcode",
											"value": "20313400"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Branch List - Successful NG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"branches Fetched\");",
											"});",
											"",
											"pm.test(\"List Of Branches Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).not.empty;",
											"    ",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/banks/branch?country=NG&bankcode=101",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks",
										"branch"
									],
									"query": [
										{
											"key": "country",
											"value": "NG"
										},
										{
											"key": "bankcode",
											"value": "101"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Branch List - Invalid Country Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"branches Fetched\");",
											"});",
											"",
											"pm.test(\"List Of Branches Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).empty;",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/banks/branch?country=US&bankcode=20313400",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks",
										"branch"
									],
									"query": [
										{
											"key": "country",
											"value": "US"
										},
										{
											"key": "bankcode",
											"value": "20313400"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Branch List - Invalid Bank Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"branches Fetched\");",
											"});",
											"",
											"pm.test(\"List Of Branches Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).empty;",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "javascript"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/banks/branch?country=GH&bankcode=234",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks",
										"branch"
									],
									"query": [
										{
											"key": "country",
											"value": "GH"
										},
										{
											"key": "bankcode",
											"value": "234"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Branch List - No country code and Bank code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Bankcode {bankcode} and Country {country} is required\");",
											"});",
											"",
											"pm.test(\"No List Of Branches Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/banks/branch?country=&bankcode=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks",
										"branch"
									],
									"query": [
										{
											"key": "country",
											"value": ""
										},
										{
											"key": "bankcode",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Branch List - Country Code and No Bank code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Bankcode {bankcode} and Country {country} is required\");",
											"});",
											"",
											"pm.test(\"No List Of Branches Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/banks/branch?country=GH&bankcode=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks",
										"branch"
									],
									"query": [
										{
											"key": "country",
											"value": "GH"
										},
										{
											"key": "bankcode",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Branch List -  No country Code and with Bank code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Bankcode {bankcode} and Country {country} is required\");",
											"});",
											"",
											"pm.test(\"No List Of Branches Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/banks/branch?country=&bankcode=20313400",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks",
										"branch"
									],
									"query": [
										{
											"key": "country",
											"value": ""
										},
										{
											"key": "bankcode",
											"value": "20313400"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Branch List - With country code not listed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Bankcode {bankcode} and Country {country} is required\");",
											"});",
											"",
											"pm.test(\"No List Of Branches Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/v1/banks/branch?country=US&bankcode=20313400",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"banks",
										"branch"
									],
									"query": [
										{
											"key": "country",
											"value": "US"
										},
										{
											"key": "bankcode",
											"value": "20313400"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account - Successful NG",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Information Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).not.empty;",
											"});",
											"pm.test(\"account name fetched\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"account_name\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000034\",\n  \"bank_code\": \"044\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination -  Resolve Account - Successful GH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Information Displayed\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).not.empty;",
											"});",
											"pm.test(\"account name fetched\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"account_name\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"\",\n  \"bank_code\": \"\",\n  \"currency\": \"GHC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account -Account Number Not Passed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Account number is required.\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_ACCOUNT_NUMBER\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n  \"bank_code\": \"044\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account -Invalid  Account Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.msg).to.eql(\"Account Resolve Error\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"RESOLVE_ERROR\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0590000042\",\n  \"bank_code\": \"044\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account - Account Number Does Not Belong To Bank Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.msg).to.eql(\"Account Resolve Error\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"RESOLVE_ERROR\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000031\",\n  \"bank_code\": \"050\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account - Invalid Bank Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.msg).contain(\"Specified bank code is invalid.\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_BANK_CODE\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000031\",\n  \"bank_code\": \"888\",\n  \"currency\": \"GHC\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account - Bank Code Does Not Belong To Country",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.msg).contain(\"Specified bank code is invalid.\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_BANK_CODE\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000034\",\n  \"bank_code\": \"044\",\n  \"currency\": \"GHS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account - Currency Not Passed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.msg).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000031\",\n  \"bank_code\": \"044\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account -Currency Not Listed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.msg).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000031\",\n  \"bank_code\": \"044\",\n  \"currency\": \"EUR\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account -Invalid Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.msg).to.eql(\"\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000031\",\n  \"bank_code\": \"044\",\n  \"currency\": \"XXX\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account -Token Expired",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TUg",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000031\",\n  \"bank_code\": \"044\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						},
						{
							"name": "Bank and Destination - Resolve Account -Token Incorrect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "xhJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TFg",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_number\": \"0690000031\",\n  \"bank_code\": \"044\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/resolve/account",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"resolve",
										"account"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Single Payout - Disburse Single",
					"item": [
						{
							"name": "Single Payout - Disburse Single - Sucessful",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Sucessful MPesa",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Sucessful MTN Ghana",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Duplicate Transaction",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Same Ref, Different Amount",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Inactive Balance",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Insufficient Balance",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - No Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"status is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"code is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"UNAUTHORIZED_ACCESS\");\r",
											"});\r",
											"pm.test(\"message is present\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unauthorized access\");\r",
											"});\r",
											"\r",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"ref\": \"SD252849857\",\r\n\t\"amount\": \"525000\",\r\n\t\"currency\": \"NGN\",\r\n\t\"bankcode\": \"044\",\r\n\t\"accountNumber\": \"0600000004\",\r\n\t\"senderName\": \"ABCompany\",\r\n\t\"lock\": \"walpassword\",\r\n\t\"narration\": \"Equipments\",\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Invalid Authorization",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Expired Authorization",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - No ref",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjgsImNvZGUiOiJNTDU4MCIsInBvc0lkIjoiMTE0NjMiLCJlYmlsbElkIjoiTVRGVyIsImlwIjpudWxsLCJjcmVhdGVkQXQiOiIyMDE2LTA5LTE2VDEzOjQ5OjIzLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDE3LTA3LTE5VDE0OjA2OjM2LjAwMFoiLCJkZWxldGVkQXQiOm51bGwsImlhdCI6MTUzMDIxMTc4MiwiZXhwIjoxNTMwMjE4OTgyfQ.gQDK03I9Jc0dO21RxsZjG0k4Px0NzTk4tRnkbV5VciU",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"ref\": \"\",\r\n\t\"amount\": \"525000\",\r\n\t\"currency\": \"NGN\",\r\n\t\"bankcode\": \"044\",\r\n\t\"accountNumber\": \"0600000004\",\r\n\t\"senderName\": \"ABCompany\",\r\n\t\"lock\": \"walpassword\",\r\n\t\"narration\": \"Equipments\",\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									],
									"query": [
										{
											"key": "Authorization",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - No ref tag",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\r\n\t\"amount\": \"525000\",\r\n\t\"currency\": \"NGN\",\r\n\t\"bankcode\": \"044\",\r\n\t\"accountNumber\": \"0600000004\",\r\n\t\"senderName\": \"ABCompany\",\r\n\t\"lock\": \"walpassword\",\r\n\t\"narration\": \"Equipments\",\r\n}"
								},
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Invalid Ref",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - No Amount",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - No Amount Tag",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Zero Amount",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Decimal Amount",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Non-Numeric Amount",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - No Currency",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - No Currency Tag",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Payout - Disburse Single - Invalid Currency",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Check Payout Status",
					"item": [
						{
							"name": "Check Payout Status - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Payout is disbursed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.contain(\"completed\")\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ref\": \"FLWT001292180\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payout Status - No Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Payout is disbursed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.contain(\"completed\")\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n \"ref\": \"15260407UAKFY6K6Y\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payout Status - Invalid Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Payout is disbursed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.contain(\"completed\")\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payout Status - Expired Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Payout is disbursed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.contain(\"completed\")\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payout Status - No Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Payout is disbursed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.contain(\"completed\")\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/disburse/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payout Status - Invalid Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Payout is disbursed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.contain( )\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ref\": \"MWT000013210510131900000126150675\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"status"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mass Payout - Disburse Batch",
					"item": []
				}
			]
		},
		{
			"name": "Funding for Payout",
			"item": [
				{
					"name": "Balances",
					"item": [
						{
							"name": "Create Wallet - Naira",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(NGN) Naira Wallet is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.currencyId).to.eql(1);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"NairaWallet\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"65\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - MultiWallet Same Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(NGN) Naira Wallet is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.currencyId).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"NairaWallet\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"66\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - MultiWallet different Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(KES) Another Currency (kenya) is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.currencyId).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"NairaWallet\",\r\n\"currency\" : \"KES\",\r\n\"user_ref\" : \"31\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Ghana",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(GHS) Ghana Wallet is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.currencyId).to.eql(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"GhanaWallet\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"54\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Cameroon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(XAF) Cameroon Wallet is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.currencyId).to.eql(5);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"CameroonWallet\",\r\n\"currency\" : \"XAF\",\r\n\"user_ref\" : \"35\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Uganda",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(UGX) Uganda Wallet is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.currencyId).to.eql(9);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"UgandaWallet\",\r\n\"currency\" : \"UGX\",\r\n\"user_ref\" : \"36\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Tanzania",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(TZS) Tanzania Wallet is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.currencyId).to.eql(8);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"TanzaniaWallet\",\r\n\"currency\" : \"TZS\",\r\n\"user_ref\" : \"50\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - South Africa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(ZAR) South Africa Wallet is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.currencyId).to.eql(11);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"SouthAfricaWallet\",\r\n\"currency\" : \"ZAR\",\r\n\"user_ref\" : \"51\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Name with Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"12354\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"38\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Name with space only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error (Currency not found)\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"    \",\r\n\"currency\" : \"TZS\",\r\n\"user_ref\" : \"40\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Name with special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"&&&TazaniaWallet\",\r\n\"currency\" : \"TZS\",\r\n\"user_ref\" : \"41\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - No Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Invalid Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_NAME\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"3\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - WrongCurrency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error (Currency not found)\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"USDWallet\",\r\n\"currency\" : \"USD\",\r\n\"user_ref\" : \"66\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Valid Currency that is not listed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error (Currency not found)\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Error- Currency not found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Currency not found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"AustraliaWallet\",\r\n\"currency\" : \"AUD\",\r\n\"user_ref\" : \"43\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Letter User_ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(NGN) Wallet with Letter UserRef is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.uref).to.eql(\"E\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"LetterUserRef\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"G\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - String User_ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(NGN) Wallet with Letter UserRef is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.uref).to.eql(\"str\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"StringUserRef\",\r\n\"currency\" : \"TZS\",\r\n\"user_ref\" : \"str\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - UserRef is 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful- Wallet is created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"(NGN) Wallet with String UserRef is succesfully created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.uref).to.eql(\"0\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"StringUser\",\r\n\"currency\" : \"TZS\",\r\n\"user_ref\" : \"0\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Used user_ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"UsedRef\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"ABD\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - No Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 - Unauthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Unauthorized access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"NoAuthorization\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"3\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Expired Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 - Unauthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Unauthorized access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzUxNzA0NCwibmFtZSI6Ilplbml0aENyZXN0V2F2ZSIsImFjY291bnROdW1iZXIiOiIiLCJiYW5rQ29kZSI6IiIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6IjAiLCJlbWFpbENvZGUiOm51bGwsImVtYWlsVmVyaWZpZWQiOmZhbHNlLCJjYW5fZ29saXZlIjpmYWxzZSwiY291bnRkb3duIjpudWxsLCJjb21wbGlhbmNlIjowLCJjb2RlIjpudWxsLCJwb3NJZCI6bnVsbCwiZWJpbGxJZCI6bnVsbCwiZmx1dHRlckFjY291bnQiOm51bGwsInJhdmUiOmZhbHNlLCJpcCI6bnVsbCwiYnVzaW5lc3NfdHlwZSI6Im1pbGxpb25zIiwicG9zRW5hYmxlZCI6ZmFsc2UsImRlc2NyaXB0aW9uIjpudWxsLCJtZXRhIjpudWxsLCJjcmVhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJkZWxldGVkQXQiOm51bGwsImlhdCI6MTYyMDczNzI4OSwiZXhwIjoxNjIwNzQ0NDg5fQ.2_DNg9mluKfT_mS18byDx2HB2bAg252mr7rTCzTKHas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"ExpiredAuthorization\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"3\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - Invalid Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 - Unauthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Unauthorized access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Invalid authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"InvalidAuthorization\",\r\n\"currency\" : \"KES\",\r\n\"user_ref\" : \"3\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - No currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Invalid Currency\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_CURRENCY\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"NoCurrency\",\r\n\"currency\" : \"\",\r\n\"user_ref\" : \"0\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - No User_Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Invalid UserRef\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_UREF\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"NoUserRef\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"\",\r\n\"lock_code\" : \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - No Lock_code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Invalid Lock\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_LOCK\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"NoUserRef\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"0\",\r\n\"lock_code\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - No name & Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"\",\r\n\"currency\" : \"\",\r\n\"user_ref\" : \"0\",\r\n\"lock_code\" : \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet - No details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"name\" : \"\",\r\n\"currency\" : \"\",\r\n\"user_ref\" : \"\",\r\n\"lock_code\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Walle - Double Wallet Created at once - Duplicate Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"name\" : \"Duplicate\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"8\",\r\n\"lock_code\" : \"password\"\r\n},\r\n{\r\n\"name\" : \"Duplicate\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"8\",\r\n\"lock_code\" : \"password\"\r\n}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Walle - Double Wallet Created at once - Different User_ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"name\" : \"Duplicate\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"8\",\r\n\"lock_code\" : \"password\"\r\n},\r\n{\r\n\"name\" : \"Duplicate\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"12\",\r\n\"lock_code\" : \"password\"\r\n}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Walle - Double Wallet Created at once - Different Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"name\" : \"Duplicate\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"8\",\r\n\"lock_code\" : \"password\"\r\n},\r\n{\r\n\"name\" : \"Duplicate\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"12\",\r\n\"lock_code\" : \"password\"\r\n}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Walle - Double Wallet Created at once - Different Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"name\" : \"Duplicate\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"8\",\r\n\"lock_code\" : \"password\"\r\n},\r\n{\r\n\"name\" : \"AnotherName\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"12\",\r\n\"lock_code\" : \"password\"\r\n}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Walle - Double Wallet Created at once - Different Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\r\n{\r\n\"name\" : \"Duplicate\",\r\n\"currency\" : \"NGN\",\r\n\"user_ref\" : \"8\",\r\n\"lock_code\" : \"password\"\r\n},\r\n{\r\n\"name\" : \"Duplicate2\",\r\n\"currency\" : \"GHS\",\r\n\"user_ref\" : \"12\",\r\n\"lock_code\" : \"123456\"\r\n}\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Search By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Gotten the right ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0].id).to.eql(20745);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet?id=20745",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "20745"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Search By Uref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Gotten the right UserRef(s)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0].uref).to.eql(\"4\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet?uref=4",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "uref",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Search By Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Gotten the right Currency (GHS)\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data[0].currency).to.eql(\"GHS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet?currency=GHS",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "currency",
											"value": "GHS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Search By Nonexistence ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No Balance gotten\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet?id=12413444",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "12413444"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Search By Nonexistence Uref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"No Balance Gotten\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql([]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet?uref=assa",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "uref",
											"value": "assa"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Search By Invalid Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Wallet Balance successfully gotten\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.not.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet?currency=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "currency",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Search without any filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Authorised Access\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Wallet Balance successfully gotten\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.not.eql([]);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  No Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 - UnAuthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error - Balance not gotten\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Invalid Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 - UnAuthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error - Balance not gotten\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "invalid authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wallet Balance -  Expired Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 - UnAuthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error - Balance not gotten\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzUxNzA0NCwibmFtZSI6Ilplbml0aENyZXN0V2F2ZSIsImFjY291bnROdW1iZXIiOiIiLCJiYW5rQ29kZSI6IiIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6IjAiLCJlbWFpbENvZGUiOm51bGwsImVtYWlsVmVyaWZpZWQiOmZhbHNlLCJjYW5fZ29saXZlIjpmYWxzZSwiY291bnRkb3duIjpudWxsLCJjb21wbGlhbmNlIjowLCJjb2RlIjpudWxsLCJwb3NJZCI6bnVsbCwiZWJpbGxJZCI6bnVsbCwiZmx1dHRlckFjY291bnQiOm51bGwsInJhdmUiOmZhbHNlLCJpcCI6bnVsbCwiYnVzaW5lc3NfdHlwZSI6Im1pbGxpb25zIiwicG9zRW5hYmxlZCI6ZmFsc2UsImRlc2NyaXB0aW9uIjpudWxsLCJtZXRhIjpudWxsLCJjcmVhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJkZWxldGVkQXQiOm51bGwsImlhdCI6MTYyMDczNzI4OSwiZXhwIjoxNjIwNzQ0NDg5fQ.2_DNg9mluKfT_mS18byDx2HB2bAg252mr7rTCzTKHas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fund with Cards",
					"item": [
						{
							"name": "Fund with Cards - Master Card(VBSecure)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK - Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Transfer is successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Visa card(VBSECURE)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK - Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Transfer is successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Johnney\",\r\n    \"lastname\"  : \"Cage\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"500\",\r\n    \"card_no\": \" 4187427415564246\",\r\n    \"cvv\" : \"828\",\r\n    \"expiry_year\":\"32\",\r\n    \"expiry_month\":\"09\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\":\"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Insufficient fund",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Transfer is unsuccessful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Insufficient funds\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"insufficient funds\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5258585922666506\",\r\n    \"cvv\" : \"883\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"09\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - No Authorization- Master",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 - Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Unauthorized Access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Invalid Authorization-Master",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 - Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Unauthorized Access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Invalid Authorization",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Expired Authorization-Verve",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 - Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Unauthorized Access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzUxNzA0NCwibmFtZSI6Ilplbml0aENyZXN0V2F2ZSIsImFjY291bnROdW1iZXIiOiIiLCJiYW5rQ29kZSI6IiIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6IjAiLCJlbWFpbENvZGUiOm51bGwsImVtYWlsVmVyaWZpZWQiOmZhbHNlLCJjYW5fZ29saXZlIjpmYWxzZSwiY291bnRkb3duIjpudWxsLCJjb21wbGlhbmNlIjowLCJjb2RlIjpudWxsLCJwb3NJZCI6bnVsbCwiZWJpbGxJZCI6bnVsbCwiZmx1dHRlckFjY291bnQiOm51bGwsInJhdmUiOmZhbHNlLCJpcCI6bnVsbCwiYnVzaW5lc3NfdHlwZSI6Im1pbGxpb25zIiwicG9zRW5hYmxlZCI6ZmFsc2UsImRlc2NyaXB0aW9uIjpudWxsLCJtZXRhIjpudWxsLCJjcmVhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJkZWxldGVkQXQiOm51bGwsImlhdCI6MTYyMDczNzI4OSwiZXhwIjoxNjIwNzQ0NDg5fQ.2_DNg9mluKfT_mS18byDx2HB2bAg252mr7rTCzTKHas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"Jax\",\r\n    \"lastname\"  : \"Cage\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"200\",\r\n    \"card_no\": \" 5061460410120223210\",\r\n    \"cvv\" : \"780\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"12\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\":\"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - No firstname-Master Card",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid First Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_FIRSTNAME\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Using Numbers as Firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid First Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_FIRSTNAME\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"123456\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Using Space as Firstname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid First Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_FIRSTNAME\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"   \",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - No lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Last Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_LASTNAME\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"200\",\r\n   \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\":\"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\",\r\n    \"recipient_id\":\"21473\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Using Numbers as lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Last Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_LASTNAME\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"12134\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"200\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\":\"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Using Space as lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Last Name\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_LASTNAME\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"  \",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"200\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\":\"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - No PhoneNumber",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Phone Number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_PHONENUMBER\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Using wrong phonenumber format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Phone Number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_PHONENUMBER\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"234556\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - No Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Email\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_EMAIL\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - Wrong email format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Email\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_EMAIL\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"wrongemail\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -No Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Amount\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_AMOUNT\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Using Letters as Numbers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"aaaa\",\r\n     \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards - No Card Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Card Number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_CARD_NUMBER\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"12134\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\":\"100\",\r\n    \"card_no\": \"\",\r\n    \"cvv\" : \"234\",\r\n    \"expiry_year\":\"23\",\r\n    \"expiry_month\":\"06\",\r\n    \"pin\": \"2345\",\r\n    \"redirecturl\":\"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\",\r\n    \"recipient_id\":\"21473\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Wrong Card Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Invalid Card Details\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid card\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"12134\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\":\"100\",\r\n    \"card_no\": \"34543534\",\r\n    \"cvv\" : \"234\",\r\n    \"expiry_year\":\"23\",\r\n    \"expiry_month\":\"06\",\r\n    \"pin\": \"2345\",\r\n    \"redirecturl\":\"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -no CVV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Card CVV\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_CARD_CVV\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -wrong CVV format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Card CVV\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_CARD_CVV\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"aaa\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -No Expiry_Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Card Expiry Details\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_CARD_EXPIRY\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Wrong Expiry_Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Card Expiry Details\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_CARD_EXPIRY\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"452\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -using letters for Expiry_Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Only Numbers can be used in Expiry year of card\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Year must be int\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"aa\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -No Expiry_Month",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Card Expiry Details\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_CARD_EXPIRY\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Wrong Expiry_Month",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Card Expiry Details\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"INVALID_CARD_EXPIRY\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"65\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Using Letters for Expiry_Month",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Only Numbers can be used in Expiry month of card\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Month must be int\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"aa\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -No pin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Wrong Pin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"4546\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Wrong Pin smaller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"45\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Wrong Pin  Bigger",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"45444\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Using Letters for pin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"aaaa\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -No redirecturl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK - Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Transfer is successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"No redirecturl\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.transfer.redirectUrl).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Wrong redirecturl",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"wrong\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -medium mobile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK - Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Transfer is successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Transfer medium is via mobile\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.transfer.medium).to.eql(\"mobile\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"mobile\",\r\n    \"recipient\": \"wallet\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -No recepient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -Wrong recepient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"Ohia\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\": \"1000\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"authurl\",\r\n    \"medium\": \"web\",\r\n    \"recipient\": \"Wrong\"\r\n   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -specified right recepient ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"OK - Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Transfer is successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Transferred to right recepient ID\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.transfer.beneficiaryId).to.eql(20610);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"12134\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\":\"100\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"31\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"3310\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"mobile\",\r\n    \"recipient\": \"wallet\",\r\n    \"recepient_id\":\"20816\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -specified wrong recepient ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\"  : \"12134\",\r\n    \"phonenumber\": \"+2348088730310\",\r\n    \"email\" : \"jamesohia4@gmail.com\",\r\n    \"amount\":\"100\",\r\n    \"card_no\": \" 5438898014560229\",\r\n    \"cvv\" : \"564\",\r\n    \"expiry_year\":\"36\",\r\n    \"expiry_month\":\"10\",\r\n    \"pin\": \"1223\",\r\n    \"redirecturl\": \"http://www.bts.com.ng\",\r\n    \"medium\": \"mobile\",\r\n    \"recipient\": \"wallet\",\r\n    \"recepient_id\":\"aaacdsscvsa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund with Cards -No details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't fund account with card\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -Right Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Verify Charge Successful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Charge Success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.response.responsecode).to.eql(\"00\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-1623e2dbb11e6e8d9f5a614a4a6428b0\",\r\n    \"otp\" : \"12345\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -Used Transaction Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Verify Charge Unuccessful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Transaction Reference\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid transaction attempt. No REF Cache\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-1623e2dbb11e6e8d9f5a614a4a6428b0\",\r\n    \"otp\" : \"12345\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -InvalidTransaction Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Verify Charge Unuccessful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Transaction Reference\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid transaction attempt. No REF Cache\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"Invalid Transaction Ref\",\r\n    \"otp\" : \"12345\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -No Transaction_reference",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify Charge Unuccessful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Transaction Reference is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"{transaction_reference} Transaction Reference is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"\",\r\n    \"otp\" : \"12345\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -Invalid OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify Charge Unuccessful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Transaction Reference is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"{transaction_reference} Transaction Reference is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-28d22c7e0bd83e596d59cfa62255f116\",\r\n    \"otp\" : \"5443\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -Using String for OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Verify Charge Unuccessful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"OTP is numeric only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OTP Must be numeric\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-20a17e8a1942b4daa320bef2e00e4a75\",\r\n    \"otp\" : \"String\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -Using Alpha-numeric characters for OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Verify Charge Unuccessful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"OTP is numeric only\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"OTP Must be numeric\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-20a17e8a1942b4daa320bef2e00e4a75\",\r\n    \"otp\" : \"1234String\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -No OTP",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Verify Charge Unuccessful\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"OTP is required\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"{otp} One Time Pin is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-20a17e8a1942b4daa320bef2e00e4a75\",\r\n    \"otp\" : \"\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -Invalid Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 - Unauthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Unauthorized access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Invalid Auth",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-20a17e8a1942b4daa320bef2e00e4a75\",\r\n    \"otp\" : \"12345\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -Expired Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 - Unauthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Unauthorized access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzUxNzA0NCwibmFtZSI6Ilplbml0aENyZXN0V2F2ZSIsImFjY291bnROdW1iZXIiOiIiLCJiYW5rQ29kZSI6IiIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6IjAiLCJlbWFpbENvZGUiOm51bGwsImVtYWlsVmVyaWZpZWQiOmZhbHNlLCJjYW5fZ29saXZlIjpmYWxzZSwiY291bnRkb3duIjpudWxsLCJjb21wbGlhbmNlIjowLCJjb2RlIjpudWxsLCJwb3NJZCI6bnVsbCwiZWJpbGxJZCI6bnVsbCwiZmx1dHRlckFjY291bnQiOm51bGwsInJhdmUiOmZhbHNlLCJpcCI6bnVsbCwiYnVzaW5lc3NfdHlwZSI6Im1pbGxpb25zIiwicG9zRW5hYmxlZCI6ZmFsc2UsImRlc2NyaXB0aW9uIjpudWxsLCJtZXRhIjpudWxsLCJjcmVhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJkZWxldGVkQXQiOm51bGwsImlhdCI6MTYyMDczNzI4OSwiZXhwIjoxNjIwNzQ0NDg5fQ.2_DNg9mluKfT_mS18byDx2HB2bAg252mr7rTCzTKHas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-20a17e8a1942b4daa320bef2e00e4a75\",\r\n    \"otp\" : \"12345\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						},
						{
							"name": "Funds with Cards -Verify Charge -No Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 - Unauthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Unauthorized access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"transaction_reference\" : \"FLW-MOCK-20a17e8a1942b4daa320bef2e00e4a75\",\r\n    \"otp\" : \"12345\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/rave/otp",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"rave",
										"otp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fund via USSD",
					"item": [
						{
							"name": "Fund via USSD-Nigeria-Right Information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful - Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+23494614000\",\r\n    \"bankCode\" : \"221\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD - No Phone Number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"No Phone Number\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"{phonenumber} Phone number is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"\",\r\n    \"bankCode\" : \"11276282\",\r\n    \"amount\" : \"300\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Wrong Phone Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"23494614000\",\r\n    \"bankCode\" : \"011\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Using Letters as phone code with +",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+avfdvfdvsdd\",\r\n    \"bankCode\" : \"221\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Using Letters as phone code without +",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"avfdvfdvsdd\",\r\n    \"bankCode\" : \"221\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Using Letters with numbers as phone code with +",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+234fdvfdvsdd\",\r\n    \"bankCode\" : \"221\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Using Letters with numbers as phone code without +",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"234fdvfdvsdd\",\r\n    \"bankCode\" : \"221\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Using a longer number as phone code with +",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+2346755555555555555555\",\r\n    \"bankCode\" : \"221\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Using a longer number as phone code without +",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"2346755555555555555555\",\r\n    \"bankCode\" : \"221\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Using a shorter number as phone code with +",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+234655\",\r\n    \"bankCode\" : \"215\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Nigeria-Using a shorter number as phone code without +",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"2347\",\r\n    \"bankCode\" : \"011\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Wrong Bank Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Bank Code\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Bank Code is Invalid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+23494614000\",\r\n    \"bankCode\" : \"3423\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- Bank Code not available for debit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Bank Code is not available for USSD debit\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Bank is not available for ussd Debit\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+2348088730310\",\r\n    \"bankCode\" : \"101\",\r\n    \"amount\" : \"1000\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{WaveUrl}}/transfer/ussd",
									"host": [
										"{{WaveUrl}}"
									],
									"path": [
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- No Bank Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"No Bank Code\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"{bankCode} Bank is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+233242223344\",\r\n    \"bankCode\" : \"\",\r\n    \"amount\" : \"100\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- Another Country Bank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Bank Code not registered\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Bank Code is Invalid\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+233242223344\",\r\n    \"bankCode\" : \"11276282\",\r\n    \"amount\" : \"400\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- No Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Invalid Amount\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"{amount} Amount is required.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+2348088730310\",\r\n    \"bankCode\" : \"215\",\r\n    \"amount\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Below 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful - Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Fund via USSD - Below 100\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.transfer.amountToSend).to.lessThan(100);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+2348088730310\",\r\n    \"bankCode\" : \"221\",\r\n    \"amount\" : \"50\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD-Above 100",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 - OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Successful - Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Fund via USSD - Above 100\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.transfer.amountToSend).to.above(100);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+2348088730310\",\r\n    \"bankCode\" : \"232\",\r\n    \"amount\" : \"200\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- Letter in Amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"500 - Internal Server Error\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+2348088730310\",\r\n    \"bankCode\" : \"215\",\r\n    \"amount\" : \"dfvdvsd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- No Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"401 - Unauthorised Access\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error- Wallet is not created\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"(Unauthorized access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"+2348088730310\",\r\n    \"bankCode\" : \"215\",\r\n    \"amount\" : \"300\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd?=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 - Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error - Moneywave profile is not funded\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Unauthorized Access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Invalid Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phoneNumber\" : \"+2348088730310\",\r\n    \"bankCode\" : \"101\",\r\n    \"amount\" : \"300\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- Expired Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 - Unauthorized\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Error - Moneywave profile is not funded\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"pm.test(\"Unauthorized Access\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MzUxNzA0NCwibmFtZSI6Ilplbml0aENyZXN0V2F2ZSIsImFjY291bnROdW1iZXIiOiIiLCJiYW5rQ29kZSI6IiIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6IjAiLCJlbWFpbENvZGUiOm51bGwsImVtYWlsVmVyaWZpZWQiOmZhbHNlLCJjYW5fZ29saXZlIjpmYWxzZSwiY291bnRkb3duIjpudWxsLCJjb21wbGlhbmNlIjowLCJjb2RlIjpudWxsLCJwb3NJZCI6bnVsbCwiZWJpbGxJZCI6bnVsbCwiZmx1dHRlckFjY291bnQiOm51bGwsInJhdmUiOmZhbHNlLCJpcCI6bnVsbCwiYnVzaW5lc3NfdHlwZSI6Im1pbGxpb25zIiwicG9zRW5hYmxlZCI6ZmFsc2UsImRlc2NyaXB0aW9uIjpudWxsLCJtZXRhIjpudWxsLCJjcmVhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJ1cGRhdGVkQXQiOiIyMDIxLTAzLTMxVDE4OjMzOjAyLjAwMFoiLCJkZWxldGVkQXQiOm51bGwsImlhdCI6MTYyMDczNzI4OSwiZXhwIjoxNjIwNzQ0NDg5fQ.2_DNg9mluKfT_mS18byDx2HB2bAg252mr7rTCzTKHas",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phoneNumber\" : \"+2348088730310\",\r\n    \"bankCode\" : \"101\",\r\n    \"amount\" : \"300\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fund via USSD- No Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 - Bad Request\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Error - Couldn't Fund via USSD\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"phonenumber\" : \"\",\r\n    \"bankCode\" : \"\",\r\n    \"amount\" : \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/transfer/ussd",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"transfer",
										"ussd"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "How to Fund",
					"item": []
				},
				{
					"name": "Check Funding Status",
					"item": []
				}
			]
		},
		{
			"name": "Transaction Reporting",
			"item": [
				{
					"name": "Search/List",
					"item": [
						{
							"name": "Search/List - Successful No Query",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful With All Query Parameters",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?page&limit&date&status&amount&ref&flwref&currency=NGN&type&wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "page",
											"value": null
										},
										{
											"key": "limit",
											"value": null
										},
										{
											"key": "date",
											"value": null
										},
										{
											"key": "status",
											"value": null
										},
										{
											"key": "amount",
											"value": null
										},
										{
											"key": "ref",
											"value": null
										},
										{
											"key": "flwref",
											"value": null
										},
										{
											"key": "currency",
											"value": "NGN"
										},
										{
											"key": "type",
											"value": null
										},
										{
											"key": "wallet",
											"value": null
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Page",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?page=2",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Limit",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?limit=D",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "limit",
											"value": "D"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Single  Date",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?date=2021-02-02",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "date",
											"value": "2021-02-02"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Single  Date Range",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?date=2021-05-01-2021-05-20",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "date",
											"value": "2021-05-01-2021-05-20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?status=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "status",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Amount",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?amount=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "amount",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Ref",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?ref=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "ref",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With FLWRef",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?flwref=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "flwref",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Currency",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?currency=NGN",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "currency",
											"value": "NGN"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Currency GHS",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?currency=GHS",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "currency",
											"value": "GHS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Currency Not Listed",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?currency=CAD",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "currency",
											"value": "CAD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Invalid Currency",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?currency=XRP",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "currency",
											"value": "XRP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Type(Credit)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?type=Credit",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "type",
											"value": "Credit"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Type(Debit)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?type=Debit",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "type",
											"value": "Debit"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Successful Query With Wallet",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?wallet=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "wallet",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Incorrect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "xhJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TFg"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "wallet",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Search/List - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TUg"
									}
								],
								"url": {
									"raw": "{{url}}/v1/report/transactions?wallet=",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"report",
										"transactions"
									],
									"query": [
										{
											"key": "wallet",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Manage Balances",
			"item": [
				{
					"name": "Create Balance",
					"item": [
						{
							"name": "Create Balance - Successful - NGN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"jpt\",\n  \"lock_code\": \"066\",\n  \"user_ref\": \"043992\",\n  \"currency\": \"GHS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - Successful - GHS",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"145678902\",\n  \"currency\": \"GHS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - Successful - KES",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"145678902\",\n  \"currency\": \"KES\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance -  Duplicate User Ref Different Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"145678902\",\n  \"currency\": \"SLL\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance -  Duplicate User Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Wallet already exists. Check [user_ref]\");",
											"});",
											"",
											"pm.test(\"Data Returns Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.eql(\"Wallet already exists. Check [user_ref]\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"GHS\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance -  Duplicate Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Created\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"KES\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - Invalid Currency Code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Currency not found\");",
											"});",
											"",
											"pm.test(\"Data Returns Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.eql(\"Currency not found\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"XXX\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - Currency Code Not Listed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Currency not found\");",
											"});",
											"",
											"pm.test(\"Data Returns Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.eql(\"Currency not found\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"CAD\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance  - No Body Passed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"{name} Wallet name is required\");",
											"});",
											"",
											"pm.test(\"Correct Code Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_NAME\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - No Name Passed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"{name} Wallet name is required\");",
											"});",
											"",
											"pm.test(\"Correct Code Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_NAME\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - No Lock Code Passed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"{lock_code} Wallet lock is required\");",
											"});",
											"",
											"pm.test(\"Correct Code Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_LOCK\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - No User Ref Passed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"{user_ref} User reference or ID is required\");",
											"});",
											"",
											"pm.test(\"Correct Code Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_UREF\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - No Currency Passed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct Error Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"{currency} Wallet lock is required\");",
											"});",
											"",
											"pm.test(\"Correct Code Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"INVALID_CURRENCY\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - Incorrect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "xhJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TFg"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Balance - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TUg",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"0690000034\",\n  \"lock_code\": \"044\",\n  \"user_ref\": \"1234567890\",\n  \"currency\": \"NGN\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Fetch Balance",
					"item": [
						{
							"name": "Fetch Balance - Successful No Query Params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"name\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/wallet",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Successful With Query Params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"name\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?id=20737&uref=16&currency=NGN",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "20737"
										},
										{
											"key": "uref",
											"value": "16"
										},
										{
											"key": "currency",
											"value": "NGN"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Successful Query With Only ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"name\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?id=20737",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "20737"
										},
										{
											"key": "uref",
											"value": "167777",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "NGN",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Successful Query With Only UREF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"name\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?uref=16",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "20737",
											"disabled": true
										},
										{
											"key": "uref",
											"value": "16"
										},
										{
											"key": "currency",
											"value": "NGN",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Successful Query With Only Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"name\");",
											"});",
											"",
											"pm.test(\"Returns Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.not.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?currency=NGN",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "20737",
											"disabled": true
										},
										{
											"key": "uref",
											"value": "167777",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "NGN"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Query With Wrong ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"No Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).not.include(\"name\");",
											"});",
											"",
											"pm.test(\"No Data Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?id=873",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "873"
										},
										{
											"key": "uref",
											"value": "",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Query With Wrong UREF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"No Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).not.include(\"name\");",
											"});",
											"",
											"pm.test(\"No Data Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?uref=167777666",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "20737",
											"disabled": true
										},
										{
											"key": "uref",
											"value": "167777666"
										},
										{
											"key": "currency",
											"value": "NGN",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Query With Wrong Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"No Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).not.include(\"name\");",
											"});",
											"",
											"pm.test(\"No Data Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?id=&uref=&currency=XRP",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": ""
										},
										{
											"key": "uref",
											"value": ""
										},
										{
											"key": "currency",
											"value": "XRP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Query With Currency Not Listed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Status returned is success\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"success\");",
											"});",
											"",
											"pm.test(\"No Account Fecthed\", function () {",
											"    pm.expect(pm.response.text()).not.include(\"name\");",
											"});",
											"",
											"pm.test(\"No Data Returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.empty;",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?currency=CAD",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "",
											"disabled": true
										},
										{
											"key": "uref",
											"value": "",
											"disabled": true
										},
										{
											"key": "currency",
											"value": "CAD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance - Incorrect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "xhJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TFg"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?id=20737&uref=167777&currency=NGN",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "20737"
										},
										{
											"key": "uref",
											"value": "167777"
										},
										{
											"key": "currency",
											"value": "NGN"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetch Balance -  Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TUg"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet?id=20737&uref=167777&currency=NGN",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet"
									],
									"query": [
										{
											"key": "id",
											"value": "20737"
										},
										{
											"key": "uref",
											"value": "167777"
										},
										{
											"key": "currency",
											"value": "NGN"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transfer Balance",
					"item": [
						{
							"name": "Transfer Balance - Successful No Body",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful All Parameters",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sourceWallet\": \"\",\n  \"recipientWallet\": \"\",\n  \"amount\": \"\",\n  \"currency\": \"\",\n  \"lock\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With SourceWallet",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sourceWallet\": \"\"\n  }\n\n  ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									],
									"query": [
										{
											"key": "sourceWallet",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With Invalid SourceWallet",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"sourceWallet\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With ReceipientWallet",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n  \"recipientWallet\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With Invalid ReceipientWallet",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \n  \"recipientWallet\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With Amount",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With No Amount",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"amount\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With Currency",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With Invalid Currency",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With Currency Code Not Listed",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With LockCode",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lock\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Successful With Invalid LockCode",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"lock\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Incorrect Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "xhJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TFg",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfer Balance - Expired Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status returned is error\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"error\");",
											"});",
											"",
											"pm.test(\"Correct message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");",
											"});",
											"",
											"pm.test(\"Correct code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TUg",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/v1/wallet/transfer",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"wallet",
										"transfer"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Dispense Error",
					"item": [
						{
							"name": "Dispute Transaction - Successful",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Ticket is logged\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Ticket logged\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"txref\": \" \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/pos/error",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"pos",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dispute Transaction - No Form Uploaded",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is Failed\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"Failed\");\r",
											"});\r",
											"pm.test(\"Ticket is logged\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Ticket not logged\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"txref\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/pos/error",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"pos",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dispute Transaction - No Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Ticket is logged\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Ticket logged\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"txref\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/pos/error",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"pos",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dispute Transaction - Invalid Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Ticket is logged\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Ticket logged\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"txref\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/pos/error",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"pos",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dispute Transaction - Expired Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Status returned is error\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"error\");\r",
											"});\r",
											"\r",
											"pm.test(\"Correct message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Invalid or expired token\");\r",
											"});\r",
											"\r",
											"pm.test(\"Correct code\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.code).to.eql(\"UNAUTHORIZED_ACCESS\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IlRocml2ZSIsImFjY291bnROdW1iZXIiOiIwNjkwMDAwMDAiLCJiYW5rQ29kZSI6IjMwNyIsImlzQWN0aXZlIjp0cnVlLCJlbnZpcm9ubWVudCI6ImxpdmUiLCJjYW5fZ29saXZlIjp0cnVlLCJjb3VudGRvd24iOm51bGwsImNvbXBsaWFuY2UiOjAsImNvZGUiOiJNMSIsInBvc0lkIjoiUDEiLCJlYmlsbElkIjpudWxsLCJpcCI6bnVsbCwiY3JlYXRlZEF0IjoiMjAxNi0wOS0xNlQxMzo0OToyMy4wMDBaIiwidXBkYXRlZEF0IjoiMjAxOC0wMi0wOVQxNDozMDo0Ny4wMDBaIiwiZGVsZXRlZEF0IjpudWxsLCJpYXQiOjE1MzAwMzA2OTcsImV4cCI6MTUzMDAzNzg5N30.zsMrcFJPpg2-H_b3Hr3Rn7pqaQhdYSGTpxO8wPR6TUg",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"txref\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/pos/error",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"pos",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dispute Transaction - No Transaction Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Ticket is logged\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Ticket logged\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"txref\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/pos/error",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"pos",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dispute Transaction - Invalid Transaction Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Ticket is logged\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Ticket logged\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"txref\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/pos/error",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"pos",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dispute Transaction -  Duplicate Transaction Ref",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status is success\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"success\");\r",
											"});\r",
											"pm.test(\"Ticket is logged\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data).to.eql(\"Ticket logged\");\r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"txref\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/v1/disburse/pos/error",
									"host": [
										"{{url}}"
									],
									"path": [
										"v1",
										"disburse",
										"pos",
										"error"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Notifications",
			"item": []
		},
		{
			"name": "Account Resolve",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	]
}